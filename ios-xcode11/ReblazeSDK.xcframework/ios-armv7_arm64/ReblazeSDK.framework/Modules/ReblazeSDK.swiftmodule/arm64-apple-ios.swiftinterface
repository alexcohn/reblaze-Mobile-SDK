// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ReblazeSDK
import CommonCrypto
import Foundation
@_exported import ReblazeSDK
import Swift
import UIKit
public enum PostApi {
  case events(address: Swift.String?, secret: Swift.String, key: Swift.String, value: Swift.String, events: [Swift.String : Any])
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoder {
  func encode(urlRequest: inout Foundation.URLRequest, with parameters: ReblazeSDK.Parameters) throws
}
public enum ParameterEncoding {
  case urlEncoding
  case jsonEncoding
  case urlAndJsonEncoding
  public func encode(urlRequest: inout Foundation.URLRequest, bodyParameters: ReblazeSDK.Parameters?, urlParameters: ReblazeSDK.Parameters?) throws
  public static func == (a: ReblazeSDK.ParameterEncoding, b: ReblazeSDK.ParameterEncoding) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum NetworkError : Swift.String, Swift.Error {
  case parametersNil
  case encodingFailed
  case missingURL
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
public enum HTTPTask {
  case request
  case requestParameters(bodyParameters: ReblazeSDK.Parameters?, bodyEncoding: ReblazeSDK.ParameterEncoding, urlParameters: ReblazeSDK.Parameters?)
  case requestParametersAndHeaders(bodyParameters: ReblazeSDK.Parameters?, bodyEncoding: ReblazeSDK.ParameterEncoding, urlParameters: ReblazeSDK.Parameters?, additionHeaders: ReblazeSDK.HTTPHeaders?)
}
public struct JSONParameterEncoder : ReblazeSDK.ParameterEncoder {
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: ReblazeSDK.Parameters) throws
}
public struct URLParameterEncoder : ReblazeSDK.ParameterEncoder {
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: ReblazeSDK.Parameters) throws
}
public class Reblaze {
  public static func start(with address: Swift.String?, secret: Swift.String, header_name: Swift.String, header_value: Swift.String, shouldShowLogs: Swift.Bool = false)
  public static func sendEvent(eventName: Swift.String)
  @objc deinit
}
extension UIWindow {
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func hitTest(_ point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  case patch
  case delete
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public typealias NetworkRouterCompletion = (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> ()
extension ReblazeSDK.ParameterEncoding : Swift.Equatable {}
extension ReblazeSDK.ParameterEncoding : Swift.Hashable {}
extension ReblazeSDK.NetworkError : Swift.Equatable {}
extension ReblazeSDK.NetworkError : Swift.Hashable {}
extension ReblazeSDK.NetworkError : Swift.RawRepresentable {}
extension ReblazeSDK.HTTPMethod : Swift.Equatable {}
extension ReblazeSDK.HTTPMethod : Swift.Hashable {}
extension ReblazeSDK.HTTPMethod : Swift.RawRepresentable {}
