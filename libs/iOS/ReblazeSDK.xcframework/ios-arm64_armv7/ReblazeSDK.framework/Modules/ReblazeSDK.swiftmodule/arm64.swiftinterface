// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -module-name ReblazeSDK
import Foundation
@_exported import ReblazeSDK
import Swift
import UIKit
@objc(ReblazeSDK_ReportCounters) public enum ReportCounters : Swift.Int, Swift.Codable {
  case NONE
  case ALL
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NetworkError : Swift.String, Swift.Error {
  case parametersNil
  case encodingFailed
  case missingURL
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class reblaze : ObjectiveC.NSObject {
  @objc public static let MINIMUM_INTERVAL: Swift.Int
  @objc public static let DEFAULT_INTERVAL: Swift.Int
  @objc(ReblazeSDK_Kind) public enum Kind : Swift.Int {
    case VERBOSE
    case DEBUG
    case INFO
    case WARN
    case ERROR
    public func greater(_ other: ReblazeSDK.reblaze.Kind) -> Swift.Bool
    public func greaterOrEqual(_ other: ReblazeSDK.reblaze.Kind) -> Swift.Bool
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public static var backendUrl: Swift.String {
    @objc get
    @objc set
  }
  @objc public static var uid: Swift.String
  @objc public static var uidHeaderName: Swift.String {
    @objc get
    @objc set
  }
  @available(*, deprecated)
  @objc public static var userAgent: Swift.String? {
    @objc get
    @objc set
  }
  @objc public static var interval: Swift.Int {
    @objc get
    @objc set
  }
  @objc public static var reportCounters: ReblazeSDK.ReportCounters {
    @objc get
    @objc set
  }
  @objc public static var hashVariant: Swift.String {
    @objc get
  }
  @objc public static var configurationName: Swift.String? {
    @objc get
  }
  @objc public static var autoSign: Swift.Bool
  @objc public static func generateHash() -> Swift.String
  @objc public static func sendEvent(_ eventName: Swift.String)
  @objc public static func enableMock()
  @objc public static func isMockEnabled() -> Swift.Bool
  @objc public static func setMockResponse(_ code: Swift.Int, remoteConfig: Swift.String? = nil)
  @objc public static func setMockResponse(_ code: Swift.Int, remoteConfig: Swift.String? = nil, delay: Swift.Int)
  @objc public static func setEventListener(_ block: ((ReblazeSDK.reblaze.Kind, Swift.String) -> Swift.Void)?)
  @objc override dynamic public init()
  @objc deinit
}
extension UIWindow {
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func hitTest(_ point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
}
extension ReblazeSDK.ReportCounters : Swift.Equatable {}
extension ReblazeSDK.ReportCounters : Swift.Hashable {}
extension ReblazeSDK.ReportCounters : Swift.RawRepresentable {}
extension ReblazeSDK.NetworkError : Swift.Equatable {}
extension ReblazeSDK.NetworkError : Swift.Hashable {}
extension ReblazeSDK.NetworkError : Swift.RawRepresentable {}
extension ReblazeSDK.reblaze.Kind : Swift.Equatable {}
extension ReblazeSDK.reblaze.Kind : Swift.Hashable {}
extension ReblazeSDK.reblaze.Kind : Swift.RawRepresentable {}
