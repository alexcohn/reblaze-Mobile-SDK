#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef REBLAZESDK_SWIFT_H
#define REBLAZESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ReblazeSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@interface NSMutableString (SWIFT_EXTENSION(ReblazeSDK))
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull dot;
@end


@interface NSMutableString (SWIFT_EXTENSION(ReblazeSDK))
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _1;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _2;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _3;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _4;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _5;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _6;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _7;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _8;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _9;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _0;
@end


@interface NSMutableString (SWIFT_EXTENSION(ReblazeSDK))
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull a;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull b;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull c;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull d;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull e;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull f;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull g;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull h;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull i;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull j;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull k;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull l;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull m;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull n;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull o;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull p;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull q;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull r;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull s;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull t;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull u;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull v;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull w;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull x;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull y;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull z;
@end


@interface NSMutableString (SWIFT_EXTENSION(ReblazeSDK))
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull A;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull B;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull C;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull D;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull E;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull F;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull G;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull H;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull I;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull J;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull K;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull L;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull M;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull N;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull O;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull P;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull Q;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull R;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull S;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull T;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull U;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull V;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull W;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull X;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull Y;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull Z;
@end


@interface NSMutableString (SWIFT_EXTENSION(ReblazeSDK))
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull space;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull point;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull dash;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull comma;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull semicolon;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull colon;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull apostrophe;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull quotation;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull plus;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull equals;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull paren_left;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull paren_right;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull asterisk;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull ampersand;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull caret;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull percent;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull pound;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull at;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull exclamation;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull question_mark;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull back_slash;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull forward_slash;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull curly_left;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull curly_right;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull bracket_left;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull bracket_right;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull bar;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull less_than;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull greater_than;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull underscore;
@end

@class UITouch;
@class UIEvent;
@class UIView;

@interface UIWindow (SWIFT_EXTENSION(ReblazeSDK))
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end

@class NSNumber;
@class NSString;
enum ReblazeSDK_ReportCounters : NSInteger;
enum ReblazeSDK_AutoSign : NSInteger;
enum ReblazeSDK_Kind : NSInteger;

SWIFT_CLASS("_TtC10ReblazeSDK7reblaze")
@interface reblaze : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MINIMUM_INTERVAL;)
+ (NSInteger)MINIMUM_INTERVAL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger DEFAULT_INTERVAL;)
+ (NSInteger)DEFAULT_INTERVAL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull backendUrl;)
+ (NSString * _Nonnull)backendUrl SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackendUrl:(NSString * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull token;)
+ (NSString * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
+ (void)setToken:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull tokenHeaderName;)
+ (NSString * _Nonnull)tokenHeaderName SWIFT_WARN_UNUSED_RESULT;
+ (void)setTokenHeaderName:(NSString * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable userAgent;)
+ (NSString * _Nullable)userAgent SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserAgent:(NSString * _Nullable)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger interval;)
+ (NSInteger)interval SWIFT_WARN_UNUSED_RESULT;
+ (void)setInterval:(NSInteger)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger timeslice;)
+ (NSInteger)timeslice SWIFT_WARN_UNUSED_RESULT;
+ (void)setTimeslice:(NSInteger)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum ReblazeSDK_ReportCounters reportCounters;)
+ (enum ReblazeSDK_ReportCounters)reportCounters SWIFT_WARN_UNUSED_RESULT;
+ (void)setReportCounters:(enum ReblazeSDK_ReportCounters)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull hashVariant;)
+ (NSString * _Nonnull)hashVariant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable configurationName;)
+ (NSString * _Nullable)configurationName SWIFT_WARN_UNUSED_RESULT;
/// Set to sign all relevant https:// requests, including WKWebView requests
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum ReblazeSDK_AutoSign autoSign;)
+ (enum ReblazeSDK_AutoSign)autoSign SWIFT_WARN_UNUSED_RESULT;
+ (void)setAutoSign:(enum ReblazeSDK_AutoSign)value;
/// Calculates hash based on timestamp, deviceId, and possibly user id
+ (NSString * _Nonnull)generateHash SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Lets the developer send custom event
///   </li>
/// </ul>
+ (void)sendEvent:(NSString * _Nonnull)eventName;
/// <ul>
///   <li>
///     Lets the developer to turn on mocking
///   </li>
///   <li>
///     Note that there is no way to turn mocking off
///   </li>
/// </ul>
+ (void)enableMock;
/// <ul>
///   <li>
///     Lets the developer check if mocking is enabled
///   </li>
/// </ul>
+ (BOOL)isMockEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setMockResponse:(NSInteger)code remoteConfig:(NSString * _Nullable)remoteConfig;
+ (void)setMockResponse:(NSInteger)code remoteConfig:(NSString * _Nullable)remoteConfig delay:(NSInteger)delay;
+ (void)setEventListener:(void (^ _Nullable)(enum ReblazeSDK_Kind, NSString * _Nonnull))block;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ReblazeSDK_Kind, "Kind", closed) {
  ReblazeSDK_KindVERBOSE = 0,
  ReblazeSDK_KindDEBUG = 1,
  ReblazeSDK_KindINFO = 2,
  ReblazeSDK_KindWARN = 3,
  ReblazeSDK_KindERROR = 4,
};


@interface reblaze (SWIFT_EXTENSION(ReblazeSDK))
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ReblazeSDK_ReportCounters, "ReportCounters", closed) {
  ReblazeSDK_ReportCountersNONE = 0,
  ReblazeSDK_ReportCountersALL = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ReblazeSDK_AutoSign, "AutoSign", closed) {
  ReblazeSDK_AutoSignNONE = 0,
  ReblazeSDK_AutoSignALL = 1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef REBLAZESDK_SWIFT_H
#define REBLAZESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ReblazeSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@interface NSMutableString (SWIFT_EXTENSION(ReblazeSDK))
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull dot;
@end


@interface NSMutableString (SWIFT_EXTENSION(ReblazeSDK))
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _1;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _2;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _3;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _4;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _5;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _6;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _7;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _8;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _9;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull _0;
@end


@interface NSMutableString (SWIFT_EXTENSION(ReblazeSDK))
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull a;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull b;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull c;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull d;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull e;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull f;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull g;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull h;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull i;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull j;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull k;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull l;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull m;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull n;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull o;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull p;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull q;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull r;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull s;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull t;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull u;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull v;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull w;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull x;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull y;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull z;
@end


@interface NSMutableString (SWIFT_EXTENSION(ReblazeSDK))
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull A;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull B;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull C;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull D;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull E;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull F;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull G;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull H;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull I;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull J;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull K;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull L;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull M;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull N;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull O;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull P;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull Q;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull R;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull S;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull T;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull U;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull V;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull W;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull X;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull Y;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull Z;
@end


@interface NSMutableString (SWIFT_EXTENSION(ReblazeSDK))
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull space;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull point;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull dash;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull comma;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull semicolon;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull colon;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull apostrophe;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull quotation;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull plus;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull equals;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull paren_left;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull paren_right;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull asterisk;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull ampersand;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull caret;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull percent;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull pound;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull at;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull exclamation;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull question_mark;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull back_slash;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull forward_slash;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull curly_left;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull curly_right;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull bracket_left;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull bracket_right;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull bar;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull less_than;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull greater_than;
@property (nonatomic, readonly, strong) NSMutableString * _Nonnull underscore;
@end

@class UITouch;
@class UIEvent;
@class UIView;

@interface UIWindow (SWIFT_EXTENSION(ReblazeSDK))
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end

@class NSNumber;
@class NSString;
enum ReblazeSDK_ReportCounters : NSInteger;
enum ReblazeSDK_AutoSign : NSInteger;
enum ReblazeSDK_Kind : NSInteger;

SWIFT_CLASS("_TtC10ReblazeSDK7reblaze")
@interface reblaze : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger MINIMUM_INTERVAL;)
+ (NSInteger)MINIMUM_INTERVAL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger DEFAULT_INTERVAL;)
+ (NSInteger)DEFAULT_INTERVAL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull backendUrl;)
+ (NSString * _Nonnull)backendUrl SWIFT_WARN_UNUSED_RESULT;
+ (void)setBackendUrl:(NSString * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull token;)
+ (NSString * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
+ (void)setToken:(NSString * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull tokenHeaderName;)
+ (NSString * _Nonnull)tokenHeaderName SWIFT_WARN_UNUSED_RESULT;
+ (void)setTokenHeaderName:(NSString * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable userAgent;)
+ (NSString * _Nullable)userAgent SWIFT_WARN_UNUSED_RESULT;
+ (void)setUserAgent:(NSString * _Nullable)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger interval;)
+ (NSInteger)interval SWIFT_WARN_UNUSED_RESULT;
+ (void)setInterval:(NSInteger)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger timeslice;)
+ (NSInteger)timeslice SWIFT_WARN_UNUSED_RESULT;
+ (void)setTimeslice:(NSInteger)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum ReblazeSDK_ReportCounters reportCounters;)
+ (enum ReblazeSDK_ReportCounters)reportCounters SWIFT_WARN_UNUSED_RESULT;
+ (void)setReportCounters:(enum ReblazeSDK_ReportCounters)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull hashVariant;)
+ (NSString * _Nonnull)hashVariant SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable configurationName;)
+ (NSString * _Nullable)configurationName SWIFT_WARN_UNUSED_RESULT;
/// Set to sign all relevant https:// requests, including WKWebView requests
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum ReblazeSDK_AutoSign autoSign;)
+ (enum ReblazeSDK_AutoSign)autoSign SWIFT_WARN_UNUSED_RESULT;
+ (void)setAutoSign:(enum ReblazeSDK_AutoSign)value;
/// Calculates hash based on timestamp, deviceId, and possibly user id
+ (NSString * _Nonnull)generateHash SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Lets the developer send custom event
///   </li>
/// </ul>
+ (void)sendEvent:(NSString * _Nonnull)eventName;
/// <ul>
///   <li>
///     Lets the developer to turn on mocking
///   </li>
///   <li>
///     Note that there is no way to turn mocking off
///   </li>
/// </ul>
+ (void)enableMock;
/// <ul>
///   <li>
///     Lets the developer check if mocking is enabled
///   </li>
/// </ul>
+ (BOOL)isMockEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)setMockResponse:(NSInteger)code remoteConfig:(NSString * _Nullable)remoteConfig;
+ (void)setMockResponse:(NSInteger)code remoteConfig:(NSString * _Nullable)remoteConfig delay:(NSInteger)delay;
+ (void)setEventListener:(void (^ _Nullable)(enum ReblazeSDK_Kind, NSString * _Nonnull))block;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ReblazeSDK_Kind, "Kind", closed) {
  ReblazeSDK_KindVERBOSE = 0,
  ReblazeSDK_KindDEBUG = 1,
  ReblazeSDK_KindINFO = 2,
  ReblazeSDK_KindWARN = 3,
  ReblazeSDK_KindERROR = 4,
};


@interface reblaze (SWIFT_EXTENSION(ReblazeSDK))
@end

typedef SWIFT_ENUM_NAMED(NSInteger, ReblazeSDK_ReportCounters, "ReportCounters", closed) {
  ReblazeSDK_ReportCountersNONE = 0,
  ReblazeSDK_ReportCountersALL = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, ReblazeSDK_AutoSign, "AutoSign", closed) {
  ReblazeSDK_AutoSignNONE = 0,
  ReblazeSDK_AutoSignALL = 1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
